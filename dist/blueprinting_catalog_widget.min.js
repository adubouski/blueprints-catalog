"use strict";!function(){var a,b=angular.module("blueprintingCatalogWidget",[]),c="BLUEPRINTING CATALOG WIDGET",d="unexpected error occurred",e=/blueprint.yaml$/i,f="/search/repositories?q=repo:*-example+user:cloudify-examples",g="",h="",i="",j="";b.directive("blueprintingCatalog",["Github","CloudifyManager","CatalogHelper","$location","$q","$log",function(b,d,e,k,l,m){return{restrict:"A",scope:{githubQuery:"@catalogGithubQuery",listTitle:"@catalogListTitle",listDescription:"@catalogListDescription",howUseLink:"@catalogHowUseLink",howContributeLink:"@catalogHowContributeLink",backText:"@catalogBackText",catalogDefaultManager:"@catalogDefaultManager",catalogCorsProxy:"@catalogCorsProxy",defaultVersion:"@catalogDefaultVersion",defaultVersionFallback:"@catalogDefaultVersionFallback"},templateUrl:"blueprinting_catalog_widget_tpl.html",link:function(n){a=n,n.githubQuery&&(f=n.githubQuery,m.debug(c,"default search query was overridden with",f)),n.defaultVersion&&(g=n.defaultVersion),n.defaultVersionFallback&&(h=n.defaultVersionFallback),n.catalogDefaultManager&&(i=n.catalogDefaultManager),n.catalogCorsProxy&&(j=n.catalogCorsProxy),n.loading=!0;var o=b.getRepositories().then(function(a){m.debug(c,"fetched repos",a),n.repos=a.data&&a.data.items||[]})["finally"](function(){n.loading=!1});n.$watch(function(){return k.search().repo},function(a){a?l.when(o,function(){for(var b,c=0,d=n.repos.length;d>c;c++)if(b=n.repos[c],b.id===+a){n.showDetails(b);break}}):n.showList()}),n.navigateToDetails=function(a){k.search("repo",a.id)},n.navigateToList=function(){k.replace(),k.search("repo","")},n.showDetails=function(a){l.when(e.fillVersions(a),function(){a.currentVersion&&e.fillReadme(a,a.currentVersion)}),n.currentRepo=a},n.switchVersion=function(a){e.changeVersion(n.currentRepo,a)},n.showList=function(){n.currentRepo=void 0},n.showUpload=function(a){m.debug(c,"show upload",a),l.when(e.fillVersions(a),function(){a.currentVersion&&(n.blueprint.url=a.html_url+"/archive/"+a.currentVersion.name+".zip",l.when(e.fillBlueprints(a,a.currentVersion),function(){var b=a.blueprintFiles[a.currentVersion.name];n.blueprint.path=b&&b[0]||""}))}),n.managerEndpoint=i,n.blueprint={id:a.name},n.uploadRepo=a},n.selectNewVersion=function(a){var b=n.uploadRepo;l.when(e.changeVersion(b,a),function(){n.blueprint.url=b.html_url+"/archive/"+a.name+".zip",n.blueprint.path=b.blueprintFiles[a.name][0]})},n.closeUpload=function(){n.error=void 0,n.uploadRepo=void 0,n.blueprint=void 0},n.uploadBlueprint=function(){m.debug(c,"do upload"),n.blueprintForm.$valid&&(n.processing=!0,n.error=void 0,d.upload(n.managerEndpoint,n.blueprint).then(function(){n.uploadRepo=void 0},function(a){m.debug(c,"upload failed",a),n.error=e.getErrorFromResponse(a)})["finally"](function(){n.processing=!1}))}}}}]),b.directive("reposList",[function(){return{restrict:"E",replace:!0,scope:{repos:"=",loading:"=",githubLimit:"=",showDetails:"&",showUpload:"&"},templateUrl:"repos_list_tpl.html"}}]),b.factory("CatalogHelper",["Github","$q","$sce","$log",function(b,f,i,j){return{changeVersion:function(a,b){return j.debug(c,"change version to",b),a.currentVersion=b,f.all([this.fillReadme(a,b),this.fillBlueprints(a,b)])},fillVersions:function(a){if(!a.versionsList){j.debug(c,"filling branches & tags for repo",a);var d=[],e=b.getTags(a.url),i=b.getBranches(a.url);return f.all([i,e]).then(function(b){d=d.concat(b[0].data||[]).concat(b[1].data||[]);for(var c,e,f,i=g||h,j=a.default_branch,k=0,l=d.length;l>k;k++)f=d[k],f.name===i&&(c=f),f.name===j&&(e=f);a.currentVersion=c||e,a.versionsList=d},this.handleGithubLimit)}},fillBlueprints:function(a,d){return a.blueprintFiles=a.blueprintFiles||{},a.blueprintFiles[d.name]?void 0:(j.debug(c,"filling blueprints for repo",a),b.getTree(a.url,d.commit.sha).then(function(b){for(var c,f=[],g=b.data&&b.data.tree||[],h=0,i=g.length;i>h;h++)c=g[h],"blob"===c.type&&e.test(c.path)&&f.push(c.path);a.blueprintFiles[d.name]=f},this.handleGithubLimit))},fillReadme:function(a,d){return a.readmeContents=a.readmeContents||{},a.readmeContents[d.name]?void 0:(j.debug(c,"filling readme for repo",a),b.getReadme(a.url,d.name).then(function(b){a.readmeContents[d.name]=i.trustAsHtml(b.data||"No Readme File")},this.handleGithubLimit))},handleGithubLimit:function(b){403===b.status&&"0"===b.headers("X-RateLimit-Remaining")&&(a.githubLimit=!0)},getErrorFromResponse:function(a){return a&&a.data?"string"==typeof a.data?a.data:a.data.message||d:d}}}]),b.factory("Github",["$http",function(a){var b="https://api.github.com";return{getRepositories:function(){return a({method:"GET",url:b+f})},getTags:function(b){return a({method:"GET",url:b+"/tags"})},getBranches:function(b){return a({method:"GET",url:b+"/branches"})},getReadme:function(b,c){return a({method:"GET",url:b+"/readme"+(c?"?ref="+encodeURIComponent(c):""),headers:{Accept:"application/vnd.github.html+json"}})},getTree:function(b,c){return a({method:"GET",url:b+"/git/trees/"+c})}}}]),b.factory("CloudifyManager",["$http",function(a){return{upload:function(b,c){var d,e,f=[];return c.path&&f.push("application_file_name="+encodeURIComponent(c.path)),c.url&&f.push("blueprint_archive_url="+encodeURIComponent(c.url)),d=f.length?"?"+f.join("&"):"",e=b+"/blueprints/"+encodeURIComponent(c.id)+d,a(j?{method:"POST",url:j,data:{method:"PUT",url:e}}:{method:"PUT",url:e})}}}])}(),angular.module("blueprintingCatalogWidget").run(["$templateCache",function(a){a.put("blueprinting_catalog_widget_tpl.html",'<section class="bl-catalog"> <!--List of repositories--> <div ng-show="!currentRepo"> <div> <h1>{{::listTitle}}</h1> <p class="catalog-description"> {{::listDescription}} <a ng-href="{{howUseLink}}" target="_how_use" ng-if="howUseLink"><br>How to Use</a> <a ng-href="{{howContributeLink}}" target="_how_contribute" ng-if="howContributeLink"><br>How to Contribute</a> </p> </div> <div> <div class="alert alert-danger" ng-show="githubLimit"> GitHub API rate limit exceeded. Please wait some time and refresh the page. </div> <repos-list data-repos="repos" data-loading="loading" data-github-limit="githubLimit" data-show-details="navigateToDetails(repo)" data-show-upload="showUpload(repo)"> </repos-list> </div> </div> <!--Repository\'s details--> <div ng-show="currentRepo"> <ng-include src="\'repo_details_tpl.html\'"></ng-include> </div> <!--Upload popup--> <div ng-show="uploadRepo && !githubLimit"> <ng-include src="\'upload_tpl.html\'"></ng-include> </div> </section>'),a.put("repo_details_tpl.html",'<div> <h1> <a href ng-click="navigateToList();" class="to-list">{{backText}}</a> {{currentRepo.name}} </h1> <ul class="action-links" ng-hide="githubLimit"> <li><a ng-href="{{currentRepo.html_url}}/tree/{{currentRepo.currentVersion.name}}" target="_tab_{{currentRepo.id}}">Source</a></li> <li><a ng-href="{{currentRepo.html_url}}/archive/{{currentRepo.currentVersion.name}}.zip">Download</a></li> <li><a href ng-click="showUpload(currentRepo);">Upload to Manager</a></li> </ul> <div class="versions-list" ng-hide="githubLimit"> <label> Branches & Tags: <select ng-model="currentRepo.currentVersion" ng-change="switchVersion(currentRepo.currentVersion);" ng-options="v as v.name for v in currentRepo.versionsList" required> </select> </label> </div> <hr> <div ng-bind-html="currentRepo.readmeContents[currentRepo.currentVersion.name]" ng-hide="githubLimit"></div> <div class="alert alert-danger" ng-show="githubLimit"> GitHub API rate limit exceeded. Please wait some time and refresh the page. </div> </div>'),a.put("repos_list_tpl.html",'<div class="repos-list"> <div class="search-repos"> <input type="text" ng-model="search.name" placeholder="search repos by name"> </div> <table> <colgroup> <col class="col-name"> <col class="col-descr"> <col class="col-source"> <col class="col-action"> </colgroup> <thead> <tr> <th>Name</th> <th>Description</th> <th>Source</th> <th>Action</th> </tr> </thead> <tr ng-show="!loading && !repos.length"> <td colspan="4">No Data Found</td> </tr> <tr ng-show="loading"> <td colspan="4">Loading...</td> </tr> <tr ng-repeat="repo in repos | filter:search"> <td> <a href ng-click="showDetails({repo: repo});">{{::repo.name}}</a> </td> <td> {{::repo.description}} </td> <td> <a ng-href="{{::repo.html_url}}" target="_tab_{{::repo.id}}">Source</a> </td> <td ng-switch="!!githubLimit"> <a href ng-switch-when="false" ng-click="showUpload({repo: repo});">Upload to Manager</a> <span ng-switch-when="true" title="GitHub API rate limit exceeded. Please wait some time and refresh the page.">Upload to Manager</span> </td> </tr> </table> </div>'),a.put("upload_tpl.html",'<div class="modal-backdrop"></div> <div class="modal"> <div class="modal-dialog"> <div class="modal-content no-header"> <div class="modal-body"> <form novalidate name="blueprintForm"> <label> Blueprint ID<br> <input type="text" ng-model="blueprint.id" placeholder="enter blueprint name" required> </label> <label> Manager Endpoint URL<br> <input type="url" ng-model="managerEndpoint" placeholder="enter manager url" required> </label> <label> Blueprint File Name<br> <select ng-model="blueprint.path" ng-options="b for b in uploadRepo.blueprintFiles[uploadRepo.currentVersion.name]" required> </select> </label> <label> Source<br> <select ng-model="uploadRepo.currentVersion" ng-change="selectNewVersion(uploadRepo.currentVersion);" ng-options="v as v.name for v in uploadRepo.versionsList" required> </select> </label> <div class="alert alert-danger" ng-show="error">{{error}}</div> </form> <div class="modal-buttons"> <button class="btn btn-default" ng-disabled="processing" ng-click="closeUpload();">Cancel</button> <button class="btn btn-primary" ng-disabled="processing || blueprintForm.$invalid" ng-click="uploadBlueprint();"> <span ng-show="processing">Uploading...</span> <span ng-hide="processing">Upload</span> </button> </div> </div> </div> </div> </div>')}]);