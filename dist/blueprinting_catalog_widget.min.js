"use strict";!function(){var a,b=angular.module("blueprintingCatalogWidget",[]),c="BLUEPRINTING CATALOG WIDGET",d="unexpected error occurred",e=/blueprint.yaml$/i,f="/search/repositories?q=*-example+user:cloudify-examples",g="",h="";b.directive("blueprintingCatalog",["Github","CloudifyManager","CatalogHelper","$q","$log",function(b,d,e,i,j){return{restrict:"A",scope:{githubQuery:"@catalogGithubQuery",listTitle:"@catalogListTitle",listDescription:"@catalogListDescription",backText:"@catalogBackText",blueprintsEndpoint:"@catalogDefaultManager",defaultVersion:"@catalogDefaultVersion"},templateUrl:"blueprinting_catalog_widget_tpl.html",link:function(k){a=k,k.githubQuery&&(f=k.githubQuery,j.debug(c,"default search query was overridden with",f)),k.defaultVersion&&(g=k.defaultVersion),k.blueprintsEndpoint&&(h=k.blueprintsEndpoint),k.loading=!0,b.getRepositories().then(function(a){j.debug(c,"fetched repos",a),k.repos=a.data&&a.data.items||[]})["finally"](function(){k.loading=!1}),k.showDetails=function(a){i.when(e.fillVersions(a),function(){a.currentVersion&&e.fillReadme(a,a.currentVersion)}),k.currentRepo=a},k.switchVersion=function(a){e.changeVersion(k.currentRepo,a)},k.showList=function(){k.currentRepo=void 0},k.showUpload=function(a){j.debug(c,"show upload",a),i.when(e.fillVersions(a),function(){a.currentVersion&&(k.blueprint.url=a.html_url+"/archive/"+a.currentVersion.name+".zip",i.when(e.fillBlueprints(a,a.currentVersion),function(){var b=a.blueprintFiles[a.currentVersion.name];k.blueprint.path=b&&b[0]||""}))}),k.managerEndpoint=h,k.blueprint={id:a.name},k.uploadRepo=a},k.selectNewVersion=function(a){var b=k.uploadRepo;i.when(e.changeVersion(b,a),function(){k.blueprint.url=b.html_url+"/archive/"+a.name+".zip",k.blueprint.path=b.blueprintFiles[a.name][0]})},k.closeUpload=function(){k.error=void 0,k.uploadRepo=void 0,k.blueprint=void 0},k.uploadBlueprint=function(){j.debug(c,"do upload"),k.blueprintForm.$valid&&(k.processing=!0,k.error=void 0,d.upload(k.managerEndpoint,k.blueprint).then(function(){k.uploadRepo=void 0},function(a){k.error=e.getErrorFromResponse(a)})["finally"](function(){k.processing=!1}))}}}}]),b.factory("CatalogHelper",["Github","$q","$sce","$log",function(b,f,h,i){return{changeVersion:function(a,b){return i.debug(c,"change version to",b),a.currentVersion=b,f.all([this.fillReadme(a,b),this.fillBlueprints(a,b)])},fillVersions:function(a){if(!a.versionsList){i.debug(c,"filling branches & tags for repo",a);var d=[],e=b.getTags(a.url),h=b.getBranches(a.url);return f.all([h,e]).then(function(b){d=d.concat(b[0].data||[]).concat(b[1].data||[]);for(var c,e=g||a.default_branch,f=0,h=d.length;h>f;f++)if(c=d[f],c.name===e){e=c;break}a.currentVersion=e,a.versionsList=d},this.handleGithubLimit)}},fillBlueprints:function(a,d){return a.blueprintFiles=a.blueprintFiles||{},a.blueprintFiles[d.name]?void 0:(i.debug(c,"filling blueprints for repo",a),b.getTree(a.url,d.commit.sha).then(function(b){for(var c,f=[],g=b.data&&b.data.tree||[],h=0,i=g.length;i>h;h++)c=g[h],"blob"===c.type&&e.test(c.path)&&f.push(c.path);a.blueprintFiles[d.name]=f},this.handleGithubLimit))},fillReadme:function(a,d){return a.readmeContents=a.readmeContents||{},a.readmeContents[d.name]?void 0:(i.debug(c,"filling readme for repo",a),b.getReadme(a.url,d.name).then(function(b){a.readmeContents[d.name]=h.trustAsHtml(b.data||"No Readme File")},this.handleGithubLimit))},handleGithubLimit:function(b){403===b.status&&"0"===b.headers("X-RateLimit-Remaining")&&(a.githubLimit=!0)},getErrorFromResponse:function(a){return a&&a.data?"string"==typeof a.data?a.data:a.data.message||d:d}}}]),b.factory("Github",["$http",function(a){var b="https://api.github.com";return{getRepositories:function(){return a({method:"GET",url:b+f})},getTags:function(b){return a({method:"GET",url:b+"/tags"})},getBranches:function(b){return a({method:"GET",url:b+"/branches"})},getReadme:function(b,c){return a({method:"GET",url:b+"/readme"+(c?"?ref="+encodeURIComponent(c):""),headers:{Accept:"application/vnd.github.html+json"}})},getTree:function(b,c){return a({method:"GET",url:b+"/git/trees/"+c})}}}]),b.factory("CloudifyManager",["$http",function(a){return{upload:function(b,c){var d,e=[];return c.path&&e.push("application_file_name="+encodeURIComponent(c.path)),c.url&&e.push("blueprint_archive_url="+encodeURIComponent(c.url)),d=e.length?"?"+e.join("&"):"",a({method:"PUT",url:b+"/blueprints/"+encodeURIComponent(c.id)+d})}}}])}(),angular.module("blueprintingCatalogWidget").run(["$templateCache",function(a){a.put("blueprinting_catalog_widget_tpl.html",'<section class="bl-catalog"> <!--List of repositories--> <div ng-show="!currentRepo"> <div> <h1>{{::listTitle}}</h1> <p>{{::listDescription}}</p> </div> <div> <div class="alert alert-danger" ng-show="githubLimit"> GitHub API rate limit exceeded. Please wait some time and refresh the page. </div> <table> <colgroup> <col class="col-name"> <col class="col-descr"> <col class="col-source"> <col class="col-action"> </colgroup> <thead> <tr> <th>Name</th> <th>Description</th> <th>Source</th> <th>Action</th> </tr> </thead> <tr ng-show="!loading && !repos.length"> <td colspan="4">No Data Found</td> </tr> <tr ng-show="loading"> <td colspan="4">Loading...</td> </tr> <tr ng-repeat="repo in repos"> <td> <a href ng-click="showDetails(repo);">{{::repo.name}}</a> </td> <td> {{::repo.description}} </td> <td> <a href="{{::repo.html_url}}" target="_tab_{{::repo.id}}">Source</a> </td> <td ng-switch="!!githubLimit"> <a href ng-switch-when="false" ng-click="showUpload(repo);">Upload to Manager</a> <span ng-switch-when="true" title="GitHub API rate limit exceeded. Please wait some time and refresh the page.">Upload to Manager</span> </td> </tr> </table> </div> </div> <!--Repository\'s details--> <div ng-show="currentRepo"> <div> <h1> <a href ng-click="showList();" class="to-list">{{backText}}</a> {{currentRepo.name}} </h1> <ul class="action-links" ng-hide="githubLimit"> <li><a href="{{currentRepo.html_url}}/tree/{{currentRepo.currentVersion.name}}" target="_tab_{{currentRepo.id}}">Source</a></li> <li><a href="{{currentRepo.html_url}}/archive/{{currentRepo.currentVersion.name}}.zip">Download</a></li> <li><a href ng-click="showUpload(currentRepo);">Upload to Manager</a></li> </ul> <div class="versions-list" ng-hide="githubLimit"> <label> Branches & Tags: <select ng-model="currentRepo.currentVersion" ng-change="switchVersion(currentRepo.currentVersion);" ng-options="v as v.name for v in currentRepo.versionsList" required> </select> </label> </div> </div> <section> <hr> <div ng-bind-html="currentRepo.readmeContents[currentRepo.currentVersion.name]" ng-hide="githubLimit"></div> <div class="alert alert-danger" ng-show="githubLimit"> GitHub API rate limit exceeded. Please wait some time and refresh the page. </div> </section> </div> <!--Upload popup--> <div ng-show="uploadRepo && !githubLimit" class="modal-backdrop"></div> <div class="modal" ng-show="uploadRepo && !githubLimit"> <div class="modal-dialog"> <div class="modal-content no-header"> <div class="modal-body"> <form novalidate name="blueprintForm"> <label> Blueprint Name<br> <input type="text" ng-model="blueprint.id" placeholder="enter blueprint name" required> </label> <label> Manager Endpoint URL<br> <input type="url" ng-model="managerEndpoint" placeholder="enter manager url" required> </label> <label> Blueprint File Name<br> <select ng-model="blueprint.path" ng-options="b for b in uploadRepo.blueprintFiles[uploadRepo.currentVersion.name]" required> </select> </label> <label> Source<br> <select ng-model="uploadRepo.currentVersion" ng-change="selectNewVersion(uploadRepo.currentVersion);" ng-options="v as v.name for v in uploadRepo.versionsList" required> </select> </label> <div class="alert alert-danger" ng-show="error">{{error}}</div> </form> <div class="modal-buttons"> <button class="btn btn-default" ng-disabled="processing" ng-click="closeUpload();">Cancel</button> <button class="btn btn-primary" ng-disabled="processing || blueprintForm.$invalid" ng-click="uploadBlueprint();"> <span ng-show="processing">Uploading...</span> <span ng-hide="processing">Upload</span> </button> </div> </div> </div> </div> </div> </section>')}]);