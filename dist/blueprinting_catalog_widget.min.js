"use strict";!function(){var a=angular.module("blueprintingCatalogWidget",[]),b="BLUEPRINTING CATALOG WIDGET",c="unexpected error occurred",d=/blueprint.yaml$/i,e="/search/repositories?q=*-example+user:cloudify-examples",f="",g="";a.directive("blueprintingCatalog",["Github","CloudifyManager","CatalogHelper","$q","$log",function(a,c,d,h,i){return{restrict:"A",scope:{githubQuery:"@catalogGithubQuery",listTitle:"@catalogListTitle",listDescription:"@catalogListDescription",blueprintsEndpoint:"@catalogDefaultManager",defaultVersion:"@catalogDefaultVersion"},templateUrl:"blueprinting_catalog_widget_tpl.html",link:function(j){j.githubQuery&&(e=j.githubQuery,i.debug(b,"default search query was overridden with",e)),j.defaultVersion&&(f=j.defaultVersion),j.blueprintsEndpoint&&(g=j.blueprintsEndpoint),j.loading=!0,a.getRepositories().then(function(a){i.debug(b,"fetched repos",a),j.repos=a.data&&a.data.items||[]})["finally"](function(){j.loading=!1}),j.showDetails=function(a){h.when(d.fillVersions(a),function(){a.currentVersion&&d.fillReadme(a)}),j.currentRepo=a},j.switchVersion=function(a){d.changeVersion(j.currentRepo,a)},j.showList=function(){j.currentRepo=void 0},j.showUpload=function(a){i.debug(b,"show upload",a),h.when(d.fillVersions(a),function(){a.currentVersion&&(j.blueprint.url=a.html_url+"/archive/"+a.currentVersion.name+".zip",h.when(d.fillBlueprints(a),function(){j.blueprint.path=a.blueprintFiles[a.currentVersion.name][0]||""}))}),j.managerEndpoint=g,j.blueprint={id:a.name},j.uploadRepo=a},j.selectNewVersion=function(a){var b=j.uploadRepo;h.when(d.changeVersion(b,a),function(){j.blueprint.url=b.html_url+"/archive/"+b.currentVersion.name+".zip",j.blueprint.path=b.blueprintFiles[b.currentVersion.name][0]})},j.closeUpload=function(){j.error=void 0,j.uploadRepo=void 0,j.blueprint=void 0},j.uploadBlueprint=function(){i.debug(b,"do upload"),j.blueprintForm.$valid&&(j.processing=!0,j.error=void 0,c.upload(j.managerEndpoint,j.blueprint).then(function(){j.uploadRepo=void 0},function(a){j.error=d.getErrorFromResponse(a)})["finally"](function(){j.processing=!1}))}}}}]),a.factory("CatalogHelper",["Github","$q","$sce","$log",function(a,e,g,h){return{changeVersion:function(a,c){return h.debug(b,"change version to",c),a.currentVersion=c,e.all([this.fillReadme(a),this.fillBlueprints(a)])},fillVersions:function(c){if(!c.versionsList){h.debug(b,"filling branches & tags for repo",c);var d=[],g=a.getTags(c.url),i=a.getBranches(c.url);return e.all([i,g]).then(function(a){d=d.concat(a[0].data||[]).concat(a[1].data||[]);for(var b,e=f||c.default_branch,g=0,h=d.length;h>g;g++)if(b=d[g],b.name===e){e=b;break}c.currentVersion=e,c.versionsList=d})}},fillBlueprints:function(c){return c.blueprintFiles=c.blueprintFiles||{},c.blueprintFiles[c.currentVersion.name]?void 0:(h.debug(b,"filling blueprints for repo",c),a.getTree(c.url,c.currentVersion.commit.sha).then(function(a){for(var b,e=[],f=a.data&&a.data.tree||[],g=0,h=f.length;h>g;g++)b=f[g],"blob"===b.type&&d.test(b.path)&&e.push(b.path);c.blueprintFiles[c.currentVersion.name]=e}))},fillReadme:function(c){return c.readmeContents=c.readmeContents||{},c.readmeContents[c.currentVersion.name]?void 0:(h.debug(b,"filling readme for repo",c),a.getReadme(c.url,c.currentVersion.name).then(function(a){c.readmeContents[c.currentVersion.name]=g.trustAsHtml(a.data||"No Readme File")},function(){c.readmeContents[c.currentVersion.name]=g.trustAsHtml("No Readme File")}))},getErrorFromResponse:function(a){return a&&a.data?"string"==typeof a.data?a.data:a.data.message||c:c}}}]),a.factory("Github",["$http",function(a){var b="https://api.github.com";return{getRepositories:function(){return a({method:"GET",url:b+e})},getTags:function(b){return a({method:"GET",url:b+"/tags"})},getBranches:function(b){return a({method:"GET",url:b+"/branches"})},getReadme:function(b,c){return a({method:"GET",url:b+"/readme"+(c?"?ref="+encodeURIComponent(c):""),headers:{Accept:"application/vnd.github.html+json"}})},getTree:function(b,c){return a({method:"GET",url:b+"/git/trees/"+c})}}}]),a.factory("CloudifyManager",["$http",function(a){return{upload:function(b,c){var d,e=[];return c.path&&e.push("application_file_name="+encodeURIComponent(c.path)),c.url&&e.push("blueprint_archive_url="+encodeURIComponent(c.url)),d=e.length?"?"+e.join("&"):"",a({method:"PUT",url:b+"/blueprints/"+encodeURIComponent(c.id)+d})}}}])}(),angular.module("blueprintingCatalogWidget").run(["$templateCache",function(a){a.put("blueprinting_catalog_widget_tpl.html",'<section class="bl-catalog"> <!--List of repositories--> <div ng-show="!currentRepo"> <div> <h1>{{::listTitle}}</h1> <p>{{::listDescription}}</p> </div> <div> <table> <colgroup> <col class="col-name"> <col class="col-descr"> <col class="col-source"> <col class="col-action"> </colgroup> <thead> <tr> <th>Name</th> <th>Description</th> <th>Source</th> <th>Action</th> </tr> </thead> <tr ng-show="!loading && !repos.length"> <td colspan="4">No Data Found</td> </tr> <tr ng-show="loading"> <td colspan="4">Loading...</td> </tr> <tr ng-repeat="repo in repos"> <td> <a href ng-click="showDetails(repo);">{{::repo.name}}</a> </td> <td> {{::repo.description}} </td> <td> <a href="{{::repo.html_url}}" target="_tab_{{::repo.id}}">Source</a> </td> <td> <a href ng-click="showUpload(repo);">Upload to Manager</a> </td> </tr> </table> </div> </div> <!--Repository\'s details--> <div ng-show="currentRepo"> <div> <h1> <a href ng-click="showList();" class="to-list"></a> {{currentRepo.name}} </h1> <ul class="action-links"> <li><a href="{{currentRepo.html_url}}/tree/{{currentRepo.currentVersion.name}}" target="_tab_{{currentRepo.id}}">Source</a></li> <li><a href="{{currentRepo.html_url}}/archive/{{currentRepo.currentVersion.name}}.zip">Download</a></li> <li><a href ng-click="showUpload(currentRepo);">Upload to Manager</a></li> </ul> <div class="versions-list"> <label>Branches & Tags:</label> <ul> <li ng-repeat="v in currentRepo.versionsList" ng-switch="v.name === currentRepo.currentVersion.name"> <span ng-switch-when="true" class="label version-selected">{{v.name}}</span> <a ng-click="switchVersion(v);" href ng-switch-when="false" class="label version">{{v.name}}</a> </li> </ul> </div> </div> <section> <hr> <div ng-bind-html="currentRepo.readmeContents[currentRepo.currentVersion.name]"></div> </section> </div> <!--Upload popup--> <div ng-show="uploadRepo" class="modal-backdrop"></div> <div class="modal" ng-show="uploadRepo"> <div class="modal-dialog"> <div class="modal-content no-header"> <div class="modal-body"> <form novalidate name="blueprintForm"> <label> Blueprint Name<br> <input type="text" ng-model="blueprint.id" placeholder="enter blueprint name" required> </label> <label> Manager Endpoint URL<br> <input type="url" ng-model="managerEndpoint" placeholder="enter manager url" required> </label> <label> Blueprint File Name<br> <select ng-model="blueprint.path" ng-options="b for b in uploadRepo.blueprintFiles[uploadRepo.currentVersion.name]" required> </select> </label> <label> Source<br> <select ng-model="uploadRepo.currentVersion" ng-change="selectNewVersion(uploadRepo.currentVersion);" ng-options="v as v.name for v in uploadRepo.versionsList" required> </select> </label> <div class="alert alert-danger" ng-show="error">{{error}}</div> </form> <div class="modal-buttons"> <button class="btn btn-default" ng-disabled="processing" ng-click="closeUpload();">Cancel</button> <button class="btn btn-primary" ng-disabled="processing || blueprintForm.$invalid" ng-click="uploadBlueprint();"> <span ng-show="processing">Uploading...</span> <span ng-hide="processing">Upload</span> </button> </div> </div> </div> </div> </div> </section>')}]);