"use strict";angular.module("blueprintingCatalogWidget",[]).constant("widgetDefaults",{repoGroups:{blueprints:{order:1,name:"blueprints",githubQuery:"-example+in:name+fork:true+user:cloudify-examples",canUpload:!0},plugins:{order:2,name:"plugins",githubQuery:"-plugin+in:name+fork:true+user:cloudify-examples"},integrations:{order:3,name:"integrations",githubQuery:"-integration+in:name+fork:true+user:cloudify-examples"}}}),function(){var a="BCW SERVICES",b="unexpected error occurred",c=/blueprint.yaml$/i;angular.module("blueprintingCatalogWidget").factory("WidgetConfig",["widgetDefaults",function(a){var b,c,d,e,f,g=!1;return{initConfig:function(h){b=angular.copy(a.repoGroups),h.blueprintsGithubQuery&&(b.blueprints.githubQuery=h.blueprintsGithubQuery),h.pluginsGithubQuery&&(b.plugins.githubQuery=h.pluginsGithubQuery),h.integrationsGithubQuery&&(b.integrations.githubQuery=h.integrationsGithubQuery),h.defaultVersion&&(c=h.defaultVersion),h.defaultVersionFallback&&(d=h.defaultVersionFallback),h.catalogDefaultManager&&(e=h.catalogDefaultManager),h.catalogCorsProxy&&(f=h.catalogCorsProxy),g=!0},checkConfig:function(){if(!g)throw new Error("configuration was not initialized")},getRepoGroups:function(){return this.checkConfig(),b},getDefaultVersion:function(){return this.checkConfig(),c},getDefaultVersionFallback:function(){return this.checkConfig(),d},getDefaultManager:function(){return this.checkConfig(),e},getCorsProxy:function(){return this.checkConfig(),f}}}]).factory("CatalogHelper",["Github","WidgetConfig","$q","$sce","$log",function(d,e,f,g,h){return{changeVersion:function(b,c,d){return h.debug(a,"change version to",c),b.currentVersion=c,f.all([this.fillReadme(b,c,d),this.fillBlueprints(b,c,d)])},fillVersions:function(b,c){if(!b.versionsList){h.debug(a,"filling branches & tags for repo",b);var g=[],i=d.getTags(b.url),j=d.getBranches(b.url);return f.all([j,i]).then(function(a){g=g.concat(a[0].data||[]).concat(a[1].data||[]);for(var c,d,f,h=e.getDefaultVersion()||e.getDefaultVersionFallback(),i=b.default_branch,j=0,k=g.length;k>j;j++)f=g[j],f.name===h&&(c=f),f.name===i&&(d=f);b.currentVersion=c||d,b.versionsList=g},this.handleGithubLimit(c))}},fillBlueprints:function(b,e,f){return b.blueprintFiles=b.blueprintFiles||{},b.blueprintFiles[e.name]?void 0:(h.debug(a,"filling blueprints for repo",b),d.getTree(b.url,e.commit.sha).then(function(a){for(var d,f=[],g=a.data&&a.data.tree||[],h=0,i=g.length;i>h;h++)d=g[h],"blob"===d.type&&c.test(d.path)&&f.push(d.path);b.blueprintFiles[e.name]=f},this.handleGithubLimit(f)))},fillReadme:function(b,c,e){return b.readmeContents=b.readmeContents||{},b.readmeContents[c.name]?void 0:(h.debug(a,"filling readme for repo",b),d.getReadme(b.url,c.name).then(function(a){b.readmeContents[c.name]=g.trustAsHtml(a.data||"No Readme File")},this.handleGithubLimit(e)))},handleGithubLimit:function(a){return function(b){403===b.status&&"0"===b.headers("X-RateLimit-Remaining")&&(a.githubLimit=!0)}},getErrorFromResponse:function(a){return a&&a.data?"string"==typeof a.data?a.data:a.data.message||b:b}}}]).factory("Github",["$http",function(a){var b="https://api.github.com";return{getRepositories:function(c){return a({method:"GET",url:b+"/search/repositories?q="+c})},getTags:function(b){return a({method:"GET",url:b+"/tags"})},getBranches:function(b){return a({method:"GET",url:b+"/branches"})},getReadme:function(b,c){return a({method:"GET",url:b+"/readme"+(c?"?ref="+encodeURIComponent(c):""),headers:{Accept:"application/vnd.github.html+json"}})},getTree:function(b,c){return a({method:"GET",url:b+"/git/trees/"+c})}}}]).factory("CloudifyManager",["$http",function(a){return{upload:function(b,c,d){var e,f,g=[];return c.path&&g.push("application_file_name="+encodeURIComponent(c.path)),c.url&&g.push("blueprint_archive_url="+encodeURIComponent(c.url)),e=g.length?"?"+g.join("&"):"",f=b+"/blueprints/"+encodeURIComponent(c.id)+e,a(d?{method:"POST",url:d,data:{method:"PUT",url:f}}:{method:"PUT",url:f})}}}])}(),angular.module("blueprintingCatalogWidget").filter("toArray",function(){return function(a){var b=[];return angular.forEach(a,function(a){b.push(a)}),b}}),function(){var a="BCW DIRECTIVES";angular.module("blueprintingCatalogWidget").directive("blueprintingCatalog",["Github","CloudifyManager","CatalogHelper","WidgetConfig","$location","$q","$log",function(b,c,d,e,f,g,h){return{restrict:"A",scope:{blueprintsGithubQuery:"@catalogBlueprintsGithubQuery",pluginsGithubQuery:"@catalogPluginsGithubQuery",integrationsGithubQuery:"@catalogIntegrationsGithubQuery",listTitle:"@catalogListTitle",listDescription:"@catalogListDescription",howUseLink:"@catalogHowUseLink",howContributeLink:"@catalogHowContributeLink",backText:"@catalogBackText",catalogDefaultManager:"@catalogDefaultManager",catalogCorsProxy:"@catalogCorsProxy",defaultVersion:"@catalogDefaultVersion",defaultVersionFallback:"@catalogDefaultVersionFallback"},templateUrl:"blueprinting_catalog_widget_tpl.html",link:function(i){e.initConfig(i),i.groups=e.getRepoGroups();var j=[];angular.forEach(i.groups,function(c,e){c.loading=!0,j.push(b.getRepositories(c.githubQuery).then(function(b){h.debug(a,"fetched repos ",e,b);for(var d=b.data&&b.data.items||[],f=0,g=d.length;g>f;f++)d[f].canUpload=!!c.canUpload;c.repos=d},d.handleGithubLimit(i))["finally"](function(){c.loading=!1}))}),f.search("list",!0),i.$watch(function(){return f.search().repo},function(a){a?g.all(j).then(function(){var b;for(var c in i.groups)if(i.groups.hasOwnProperty(c)){b=i.groups[c].repos;for(var d,e=0,f=b.length;f>e;e++)if(d=b[e],d.id===+a)return void i.showDetails(d)}}):i.showList()}),i.navigateToDetails=function(a){f.search("repo",a.id)},i.navigateToList=function(){f.replace(),f.search("repo",null)},i.showDetails=function(a){g.when(d.fillVersions(a,i),function(){a.currentVersion&&d.fillReadme(a,a.currentVersion,i)}),i.currentRepo=a},i.switchVersion=function(a){d.changeVersion(i.currentRepo,a,i)},i.showList=function(){i.currentRepo=void 0},i.showUpload=function(b){h.debug(a,"show upload",b),g.when(d.fillVersions(b,i),function(){b.currentVersion&&(i.blueprint.url=b.html_url+"/archive/"+b.currentVersion.name+".zip",g.when(d.fillBlueprints(b,b.currentVersion,i),function(){var a=b.blueprintFiles[b.currentVersion.name];i.blueprint.path=a&&a[0]||""}))}),i.managerEndpoint=e.getDefaultManager(),i.blueprint={id:b.name},i.uploadRepo=b},i.selectNewVersion=function(a){var b=i.uploadRepo;i.blueprint.url=b.html_url+"/archive/"+a.name+".zip",g.when(d.changeVersion(b,a,i),function(){i.blueprint&&(i.blueprint.path=b.blueprintFiles[a.name][0])})},i.closeUpload=function(){i.error=void 0,i.uploadRepo=void 0,i.blueprint=void 0},i.uploadBlueprint=function(){h.debug(a,"do upload"),i.blueprintForm.$valid&&(i.processing=!0,i.error=void 0,c.upload(i.managerEndpoint,i.blueprint,e.getCorsProxy()).then(function(){i.uploadRepo=void 0},function(b){h.debug(a,"upload failed",b),i.error=d.getErrorFromResponse(b)})["finally"](function(){i.processing=!1}))}}}}]).directive("reposList",[function(){return{restrict:"E",replace:!0,scope:{repos:"=",type:"=",loading:"=",canUpload:"=",showDetails:"&",showUpload:"&"},templateUrl:"repos_list_tpl.html"}}]).directive("copyToClipboard",["$window","$log",function(b,c){return{restrict:"A",scope:{text:"="},link:function(d,e){function f(d){var e=g(d);i.body.appendChild(e);try{h(e),c.debug(a,"copied: "+d)}catch(f){c.warn(a,"command not supported by your browser",f),c.warn(a,"using fallback impl."),b.prompt("Copy to clipboard & hit enter",d)}i.body.removeChild(e)}function g(a){var b=i.createElement("textarea");return b.style.position="absolute",b.style.left="-5000px",b.textContent=a,b}function h(a){if(a.select(),!i.execCommand("copy"))throw"failed to  copy"}var i=b.document;e.on("click",function(){f(d.text)})}}}])}(),angular.module("blueprintingCatalogWidget").run(["$templateCache",function(a){a.put("blueprinting_catalog_widget_tpl.html",'<section class="bl-catalog"> <!--List of repositories--> <div ng-show="!currentRepo"> <div> <h1>{{::listTitle}}</h1> <p class="catalog-description"> {{::listDescription}} <a ng-href="{{howUseLink}}" target="_how_use" ng-if="howUseLink"><br>How to Use</a> <a ng-href="{{howContributeLink}}" target="_how_contribute" ng-if="howContributeLink"><br>How to Contribute</a> </p> </div> <div> <div class="alert alert-danger" ng-show="githubLimit"> GitHub API rate limit exceeded. Please wait some time and refresh the page. </div> <div ng-repeat="model in groups | toArray | orderBy:\'order\'"> <repos-list data-repos="model.repos" data-type="model.name" data-loading="model.loading" data-can-upload="!githubLimit && model.canUpload" data-show-details="navigateToDetails(repo)" data-show-upload="showUpload(repo)"> </repos-list> </div> </div> </div> <!--Repository\'s details--> <div ng-show="currentRepo"> <ng-include src="\'repo_details_tpl.html\'"></ng-include> </div> <!--Upload popup--> <div ng-show="uploadRepo && !githubLimit"> <ng-include src="\'upload_tpl.html\'"></ng-include> </div> </section>'),a.put("repo_details_tpl.html",'<div> <h1> <a href ng-click="navigateToList();" class="to-list">{{backText}}</a> {{currentRepo.name}} </h1> <ul class="action-links" ng-hide="githubLimit"> <li><a ng-href="{{currentRepo.html_url}}/tree/{{currentRepo.currentVersion.name}}" target="_tab_{{currentRepo.id}}">Source</a></li> <li><a ng-href="{{currentRepo.html_url}}/archive/{{currentRepo.currentVersion.name}}.zip">Download</a></li> <li ng-show="currentRepo.canUpload"><a href ng-click="showUpload(currentRepo);">Upload to Manager</a></li> </ul> <div class="versions-list" ng-hide="githubLimit"> <label> Branches & Tags: <select ng-model="currentRepo.currentVersion" ng-change="switchVersion(currentRepo.currentVersion);" ng-options="v as v.name for v in currentRepo.versionsList" required> </select> </label> </div> <hr> <div ng-bind-html="currentRepo.readmeContents[currentRepo.currentVersion.name]" ng-hide="githubLimit"></div> <div class="alert alert-danger" ng-show="githubLimit"> GitHub API rate limit exceeded. Please wait some time and refresh the page. </div> </div>'),a.put("repos_list_tpl.html",'<div class="repos-list"> <div class="search-repos"> <h4>{{type}}:</h4> <input type="text" ng-model="search.name" placeholder="search {{type}} by name"> </div> <table> <colgroup> <col class="col-name"> <col class="col-descr"> <col class="col-source"> <col ng-if="canUpload" class="col-action"> </colgroup> <thead> <tr> <th>Name</th> <th>Description</th> <th>Source</th> <th ng-if="canUpload">Action</th> </tr> </thead> <tr ng-repeat="repo in filtered = (repos | filter:search)"> <td> <a href ng-click="showDetails({repo: repo});">{{::repo.name}}</a> </td> <td> {{::repo.description}} </td> <td> <a ng-href="{{::repo.html_url}}" target="_tab_{{::repo.id}}">Source</a> </td> <td ng-if="canUpload"> <a href ng-click="showUpload({repo: repo});">Upload to Manager</a> </td> </tr> <tr ng-show="!loading && !filtered.length"> <td colspan="{{canUpload ? 4 : 3}}">No Data Found</td> </tr> <tr ng-show="loading"> <td colspan="{{canUpload ? 4 : 3}}">Loading...</td> </tr> </table> </div>'),a.put("upload_tpl.html",'<div class="modal-backdrop"></div> <div class="modal"> <div class="modal-dialog"> <div class="modal-content no-header"> <div class="modal-body"> <form novalidate name="$parent.blueprintForm"> <label> Blueprint ID<br> <input type="text" ng-model="blueprint.id" placeholder="enter blueprint name" required> </label> <label> Manager Endpoint URL<br> <input type="url" ng-model="$parent.managerEndpoint" placeholder="enter manager url" required> </label> <label> Blueprint File Name<br> <select ng-model="blueprint.path" ng-options="b for b in uploadRepo.blueprintFiles[uploadRepo.currentVersion.name]" required> </select> </label> <label class="archive-url"> Source<br> <select ng-model="uploadRepo.currentVersion" ng-change="selectNewVersion(uploadRepo.currentVersion);" ng-options="v as v.name for v in uploadRepo.versionsList" required> </select> <a href class="clipboard" copy-to-clipboard data-text="blueprint.url">Copy to Clipboard</a> </label> <div class="alert alert-danger" ng-show="error">{{error}}</div> </form> <div class="modal-buttons"> <button class="btn btn-default" ng-disabled="processing" ng-click="closeUpload();">Cancel</button> <button class="btn btn-primary" ng-disabled="processing || blueprintForm.$invalid" ng-click="uploadBlueprint();"> <span ng-show="processing">Uploading...</span> <span ng-hide="processing">Upload</span> </button> </div> </div> </div> </div> </div>')}]);